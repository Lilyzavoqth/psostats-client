{{define "game"}}
    <html lang="en">
    <head>
        <meta name="viewport" content="width=device-width"/>
        <meta property="og:site_name" content="PSOStats"/>
        <meta property="og:title" content="{{ .Game.QuestName }} - {{ .FormattedQuestTime}}"/>
        <meta property="og:description" content="Run by {{ range $index,$player := .Game.AllPlayers }}{{ if $index }}, {{ end }}{{ $player.Name }}({{ $player.Class }}){{ end }}"/>
        <title>PSOStats</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">
        <link href="/static/main2.css" rel="stylesheet" type="text/css">
        <script src='https://code.jquery.com/jquery-1.11.3.min.js'></script>
        <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
              integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
              crossorigin=""/>
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
                integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
                crossorigin=""></script>
        <script src="/static/LeafletPlayback.min.js"></script>
    </head>
    <style>
        .psostats-chart {
            background-color: #444;
            margin-bottom: 4px;
        }
        .psostats-equipment {
            padding: 8px 16px;
        }
        .current-player {
            font-weight: bold;
        }
        .row {
            margin-bottom: 16px;
        }
        a.list-group-item {
            color: #abcdff;
        }
        #mapid { height: 500px; }
    </style>
    <body>
    <div class="container">
        {{ template "navbar" }}
        <div class="row psostats-heading">
            <div class="col">
                <h1>{{ .Game.QuestName}} <small class="text-muted">Episode {{ .Game.Episode }}</small></h1>
                <h2 class="display-6">{{ if gt .Game.Points 0}}{{ .Game.Points }} Points{{ else }}{{ .FormattedQuestTime}}{{ end }}</h2>
            </div>
        </div>
        <div class="row psostats-questbasics">
            <div class="col-12 col-lg-6">
                <ul class="list-group list-group-flush" style="margin-bottom: 4px;">
                    <li class="list-group-item">Category: <span style="float: right">{{ len .Game.AllPlayers }}p {{ if .Game.PbCategory}}PB{{else}}No-PB{{end}}</span></li>
                    <li class="list-group-item">Difficulty: <span style="float: right">{{ .Game.Difficulty }}</span></li>
                    {{ if gt .Game.Points 0}}<li class="list-group-item">Time: <span style="float: right">{{ .FormattedQuestTime}}</span></li>{{ end }}
                    <li class="list-group-item">Date: <span style="float: right">{{ .Game.QuestStartDate }}</span></li>
                    <a class="list-group-item" href="/players/{{ .Game.UserName }}">Player: <span style="float: right">{{ .Game.UserName }}</span></a>
                    <li class="list-group-item">Deaths: <span style="float: right">{{ .Game.DeathCount }}</span></li>
                    <li class="list-group-item">Enemies Killed: <span style="float: right">{{ .Game.MonstersDead }}</span></li>
                    {{ if gt .Game.FTUsed 0 }}<li class="list-group-item">FT Used: <span style="float: right">{{ .Game.FTUsed }}</span></li> {{ end }}
                    {{ if gt .Game.DTUsed 0 }}<li class="list-group-item">DT Used: <span style="float: right">{{ .Game.DTUsed }}</span></li> {{ end }}
                    {{ if gt .Game.CTUsed 0 }}<li class="list-group-item">CT Used: <span style="float: right">{{ .Game.CTUsed }}</span></li> {{ end }}
                    {{ if gt .Game.TPUsed 0 }}<li class="list-group-item">TP Used: <span style="float: right">{{ .Game.TPUsed }}</span></li> {{ end }}
                    {{ if gt (len .Game.TimeByState) 0 }}<li class="list-group-item">Time Moving: <span style="float: right">{{ .TimeMoving }}</span></li> {{ end }}
                    {{ if gt (len .Game.TimeByState) 0}}<li class="list-group-item">Time Standing: <span style="float: right">{{ .TimeStanding }}</span></li> {{ end }}
                    {{ if gt (len .Game.TimeByState) 0 }}<li class="list-group-item">Time Attacking: <span style="float: right">{{ .TimeAttacking }}</span></li> {{ end }}
                    {{ if gt .TimeCasting 0 }}<li class="list-group-item">Time Casting: <span style="float: right">{{ .FormattedTimeCasting }}</span></li> {{ end }}
                    {{ if gt (len .VideoUrl) 0 }}<a class="list-group-item" href="{{ .VideoUrl }}">Video</a> {{ end }}
                </ul>
                <ul class="list-group list-group-flush" style="margin-bottom: 4px;">
                    {{$game := .Game}}
                    {{ $root := . }}
                    {{ range $index, $player := .Game.AllPlayers }}
                        {{ if index $root.HasPov $index}}
                            <a href="/game/{{ $game.Id }}/{{ $index }}" class="list-group-item{{ if eq $player.GuildCard $game.GuildCard }} current-player{{ end }}">{{ $player.Class }} (Lv.{{ $player.Level }}) {{ $player.Name }}</a>
                        {{ else }}
                            <li class="list-group-item">{{ $player.Class }} (Lv.{{ $player.Level }}) {{ $player.Name }}</li>
                        {{ end }}

                    {{ end }}
                </ul>
            </div>
            <div class="col-12 col-lg-6">
                <div class="psostats-chart">
                    <h4 class="psostats-equipment">{{ .Game.PlayerName}}'s Equipment</h4>
                    {{ if gt (len .Weapons) 0 }}
                        <div id="weapon-donut" ></div>
                        <div class="psostats-equipment">
                            {{ range .Frames }} <div><img alt="Frame" src="/static/Frame_icon.png"/> {{ .Display }}</div>{{ end}}
                            {{ range .Units }} <div><img alt="Unit" src="/static/Unit_icon.png" style="margin-left: 16px;"/> {{ .Display }}</div> {{ end}}
                            {{ range .Barriers }} <div><img alt="Barrier" src="/static/Shield_icon.png"/> {{ .Display }}</div> {{ end}}
                            {{ range .Mags }} <div><img alt="Mag" src="/static/Mag_icon.png"/> {{ .Display }}</div> {{ end}}
                        </div>
                    {{ end }}
                </div>
            </div>
        </div>
        {{ if gt (len .MapData) 0}}
            <div class="row">
                <div class="col">
                    <div id="mapid"></div>
                </div>
            </div>
        {{ end }}
        <div class="row">
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="hp-chart"></div>
                </div>
            </div>
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="monsters-alive-chart"></div>
                </div>
            </div>
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="monsters-hp-chart"></div>
                </div>
            </div>
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="monsters-killed-chart"></div>
                </div>
            </div>
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="sd-chart"></div>
                </div>
            </div>
            {{/* Some older games don't include PB */}}
            {{ if gt (len .PbRanges) 2}}
            <div class="col-12">
                <div class="psostats-chart">
                    <div id="pb-chart"></div>
                </div>
            </div>
            {{ end }}

            <div class="col-12">
                <div class="psostats-chart">
                    <div id="meseta-chart"></div>
                </div>
            </div>
            {{ if gt .Game.FTUsed 0 }}
                <div class="col-12">
                    <div class="psostats-chart">
                        <div id="ft-chart"></div>
                    </div>
                </div>
            {{ end }}
        </div>
    </div>
    </body>
    </html>
    <script>
        window.Apex = {
            chart: {
                foreColor: '#ccc',
                toolbar: {
                    show: false
                },
                width: "100%",
                height: 230,
            },
            tooltip: {
                theme: 'dark'
            },
            stroke: {
                curve: 'stepline',
                width: 2
            },
            dataLabels: {
                enabled: false
            },
            xaxis: { tickAmount: 10 },
            yaxis: {
                labels: {
                    minWidth: 40
                }
            },
        };

        const options = {
            title: {
                text: 'HP'
            },
            chart: {
                id: 'hptp',
                type: 'line',
                group: "group1",
            },
            stroke: {
                width: 3
            },
            series: [{
                name: 'HP',
                data: [{{ range $key, $val := .HpRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#a43a3a'
            }{{if gt .Game.TPUsed 0}},{
                name: 'TP',
                data: [{{ range $key, $val := .TpRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#64bcf2'
            } {{end}}],
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                        {{ range $key, $value := .InvincibleRanges }}{x: {{ $key }}, x2: {{ $value }}, opacity: 0.6, fillColor: '#ffd412'},{{ end }}
                ]
            }
        };
        const monstersAliveOptions = {
            title: {
                text: 'Monsters Alive'
            },
            chart: {
                id: 'monstersAlive',
                type: 'area',
                group: "group1",
            },
            stroke: {
                curve: 'stepline',
            },
            series: [{
                name: 'Monsters Alive',
                data: [{{ range $key, $val := .MonstersAliveRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#ccc'
            }],
            fill: {
                opacity: 1,
                type: 'solid',
            },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const monsterHpPoolOptions = {
            title: {
                text: 'Total Monster HP'
            },
            chart: {
                id: 'monsterHpPool',
                type: 'area',
                group: "group1",
            },
            series: [{
                name: 'Total Monster HP',
                data: [{{ range $key, $val := .HpPoolRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
            }],
            fill: {
                opacity: 1,
                type: 'solid',
            },
            colors: ['#ccc'],
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const monstersKilledOptions = {
            title: {
                text: 'Monsters Killed'
            },
            chart: {
                id: 'monstersKilled',
                type: 'area',
                group: "group1",
            },
            stroke: {
                curve: 'stepline',
            },
            series: [{
                name: 'Monsters Killed',
                data: [{{ range $key, $val := .MonstersKilledRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#ccc'
            }],
            fill: {
                opacity: 1,
                type: 'solid',
            },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const sdOptions = {
            title: {
                text: 'Shifta/Deband'
            },
            chart: {
                id: 'sd',
                type: 'area',
                group: "group1",
            },
            stroke: {
                curve: 'stepline',
            },
            series: [{
                name: 'Deband',
                data: [{{ range $key, $val := .DebandRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#64bcf2'
            },{
                name: 'Shifta',
                data: [{{ range $key, $val := .ShiftaRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#a43a3a'
            }],
            fill: {
                opacity: .4,
                type: 'solid',
            },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }

        const pbOptions = {
            title: {
                text: 'Photon Blast'
            },
            chart: {
                id: 'pb',
                type: 'area',
                group: "group1",
            },
            stroke: {
                curve: 'stepline',
            },
            series: [{
                name: 'PB',
                data: [{{ range $key, $val := .PbRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#ccc'
            }],
            fill: {
                opacity: .4,
                type: 'solid',
            },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const mesetaOptions = {
            title: {
                text: 'Meseta Charged'
            },
            chart: {
                id: 'meseta',
                type: 'area',
                group: "group1",
            },
            stroke: {
                curve: 'stepline',
            },
            series: [{
                name: 'Meseta Charged',
                data: [{{ range $key, $val := .MesetaChargedRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#b08313'
            }],
            fill: {
                opacity: .4,
                type: 'solid',
            },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const hpChart = new ApexCharts(document.querySelector("#hp-chart"), options);
        hpChart.render();
        const monstersAliveChart = new ApexCharts(document.querySelector("#monsters-alive-chart"), monstersAliveOptions);
        monstersAliveChart.render();
        const monsterHpPoolChart = new ApexCharts(document.querySelector("#monsters-hp-chart"), monsterHpPoolOptions);
        monsterHpPoolChart.render();
        const monstersKilledChart = new ApexCharts(document.querySelector("#monsters-killed-chart"), monstersKilledOptions);
        monstersKilledChart.render();
        const sdChart = new ApexCharts(document.querySelector("#sd-chart"), sdOptions);
        sdChart.render();
        const pbChart = new ApexCharts(document.querySelector("#pb-chart"), pbOptions);
        pbChart.render();
        const mesetaChart = new ApexCharts(document.querySelector("#meseta-chart"), mesetaOptions);
        mesetaChart.render();
        {{ if gt .Game.FTUsed 0 }}
        const ftOptions = {
            title: {
                text: 'Freeze Traps'
            },
            chart: {
                id: 'ft',
                type: 'line',
                group: "group1",
            },
            stroke: {
                width: 3
            },
            series: [{
                name: 'FT',
                data: [{{ range $key, $val := .FreezeTrapRanges }} [{{ $key }}, {{ $val}}], {{ end }}],
                color: '#64bcf2'
            }],
            xaxis: { tickAmount: 10 },
            annotations: {
                xaxis: [
                    {{ range .Game.Events }}
                    {{ if ne .Description "Died"}}
                    {x: {{ .Second }}, label: { text: '{{ .Description }}', borderWidth: 0, style: { color: '#333' } }},
                    {{ end }}
                    {{ end }}
                ]
            }
        }
        const ftChart = new ApexCharts(document.querySelector("#ft-chart"), ftOptions);
        ftChart.render();
        {{ end }}

        const weaponDonutOptions = {
            series: [ {{ range .Weapons }} {{ .SecondsEquipped }}, {{ end }}],
            labels: [ {{ range .Weapons }} "{{ .Display }}", {{ end }}],
            chart: {
                type: 'donut',
            },
            theme: {
                palette: 'palette3'
            },
            responsive: [{
                breakpoint: 480,
                options: {
                    chart: {
                        height: 400
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }]
        };

        const weaponDonutChart = new ApexCharts(document.querySelector("#weapon-donut"), weaponDonutOptions);
        weaponDonutChart.render();

        {{ if gt (len .MapData) 0}}
        const map = L.map('mapid', {
            crs: L.CRS.Simple
        });
        // map.setView([101.238205, 361.75732], 9);
        // map.setView([44.61131534, -123.4726739], 9);
        // var forest2Bounds = [[-635,-720], [665,660]];
        // var bounds = [[-330,-40], [250,1100]];
        const bounds = [[-520, -25], [125, 1100]]
        const image = L.imageOverlay('/static/ruins2_2.jpg', bounds).addTo(map);
        var hucastIcon = L.icon({
            iconUrl: '/static/hucast.jpg',
            iconSize: [40, 40], // size of the icon
            shadowSize: [0, 0], // size of the shadow
            iconAnchor: [3.5, 10], // point of the icon which will correspond to marker's location
            shadowAnchor: [0, 0], // the same for the shadow
            popupAnchor: [0, -10] // point from which the popup should open relative to the iconAnchor
        });
        var arlanIcon = L.icon({
            iconUrl: '/static/arlan.png',
            iconSize: [40, 40], // size of the icon
            shadowSize: [0, 0], // size of the shadow
            iconAnchor: [3.5, 10], // point of the icon which will correspond to marker's location
            shadowAnchor: [0, 0], // the same for the shadow
            popupAnchor: [0, -10] // point from which the popup should open relative to the iconAnchor
        });
        const merlanIcon = L.icon({
            iconUrl: '/static/merlan.png',
            iconSize: [40, 40], // size of the icon
            shadowSize: [0, 0], // size of the shadow
            iconAnchor: [3.5, 10], // point of the icon which will correspond to marker's location
            shadowAnchor: [0, 0], // the same for the shadow
            popupAnchor: [0, -10] // point from which the popup should open relative to the iconAnchor
        });
        const deldIcon = L.icon({
            iconUrl: '/static/deld.png',
            iconSize: [40, 40], // size of the icon
            shadowSize: [0, 0], // size of the shadow
            iconAnchor: [3.5, 10], // point of the icon which will correspond to marker's location
            shadowAnchor: [0, 0], // the same for the shadow
            popupAnchor: [0, -10] // point from which the popup should open relative to the iconAnchor
        });
        const clawIcon = L.icon({
            iconUrl: '/static/claw.png',
            iconSize: [40, 40], // size of the icon
            shadowSize: [0, 0], // size of the shadow
            iconAnchor: [3.5, 10], // point of the icon which will correspond to marker's location
            shadowAnchor: [0, 0], // the same for the shadow
            popupAnchor: [0, -10] // point from which the popup should open relative to the iconAnchor
        });
        const bulclawIcon = L.icon({
            iconUrl: '/static/bulclaw.png',
            iconSize: [40, 40], // size of the icon
            shadowSize: [0, 0], // size of the shadow
            iconAnchor: [3.5, 10], // point of the icon which will correspond to marker's location
            shadowAnchor: [0, 0], // the same for the shadow
            popupAnchor: [0, -10] // point from which the popup should open relative to the iconAnchor
        });
        const delsaberIcon = L.icon({
            iconUrl: '/static/delsaber.png',
            iconSize: [40, 40], // size of the icon
            shadowSize: [0, 0], // size of the shadow
            iconAnchor: [3.5, 10], // point of the icon which will correspond to marker's location
            shadowAnchor: [0, 0], // the same for the shadow
            popupAnchor: [0, -10] // point from which the popup should open relative to the iconAnchor
        });

        const bringerIcon = L.icon({
            iconUrl: '/static/bringer.png',
            iconSize: [40, 40], // size of the icon
            shadowSize: [0, 0], // size of the shadow
            iconAnchor: [3.5, 10], // point of the icon which will correspond to marker's location
            shadowAnchor: [0, 0], // the same for the shadow
            popupAnchor: [0, -10] // point from which the popup should open relative to the iconAnchor
        });
        const gunnerIcon = L.icon({
            iconUrl: '/static/gunner.png',
            iconSize: [40, 40], // size of the icon
            shadowSize: [0, 0], // size of the shadow
            iconAnchor: [3.5, 10], // point of the icon which will correspond to marker's location
            shadowAnchor: [0, 0], // the same for the shadow
            popupAnchor: [0, -10] // point from which the popup should open relative to the iconAnchor
        });

        const playbackOptions = {
            tickLen: 60,
            speed: 0.5,
            maxInterpolationTime: 2,
            playControl: true,
            dateControl: true,
            sliderControl: true,
            labels: true,
            popups: true,
            fadeMarkersWhenStale: true,
            staleTime: 1,
            marker: function(featureData) {
                var icon;
                switch (featureData.properties.title) {
                    case "Arlan":
                        icon = arlanIcon;
                        break;
                    case "Merlan":
                        icon = merlanIcon;
                        break;
                    case "Del-D":
                        icon = deldIcon;
                        break;
                    case "Claw":
                        icon = clawIcon;
                        break;
                    case "Bulclaw":
                        icon = bulclawIcon;
                        break;
                    case "Delsaber":
                        icon = delsaberIcon;
                        break;
                    case "Dark Bringer":
                        icon = bringerIcon;
                        break;
                    case "Dark Gunner":
                        icon = gunnerIcon;
                        break;
                    default:
                        icon = hucastIcon
                }
                return {
                    icon: icon,
                    getPopup: function (feature) {
                        return feature.properties.title;
                    }
                }
            }
        };

        {{ range $key,$value := .MapData }}
        const e{{$key}} ={"type":"Feature", "geometry":{"type":"MultiPoint","coordinates":[{{ range .Coordinates }}[{{ range . }}{{.}},{{ end }}],{{ end }}]},"properties":{"title":"{{$value.Title}}", "time":[{{ range .Time }}{{.}},{{end}}]}}
        {{ end }}
        map.setView([e0.geometry.coordinates[0][1], e0.geometry.coordinates[0][0]], 1);
        const demoTracks = [{{ range $key,$value := .MapData }}e{{$key}},{{ end }}];
        playback = new L.Playback(map,  demoTracks, null, playbackOptions)
        {{ end }}
    </script>
{{end}}